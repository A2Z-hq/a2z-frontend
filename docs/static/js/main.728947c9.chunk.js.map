{"version":3,"sources":["components/LinkButton/LinkButton.jsx","components/Logo/Logo.jsx","hoc/Layout/Layout.jsx","containers/Home/Home.jsx","containers/App/App.jsx","serviceWorker.js","index.js"],"names":["LinkButton","props","variableStyles","color","fontSize","backgroundColor","bgColor","react_default","a","createElement","href","style","className","children","Logo","Layout","Fragment","id","components_Logo_Logo","components_LinkButton_LinkButton","Home","React","Component","App","BrowserRouter","hoc_Layout_Layout","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAgBeA,eAbI,SAACC,GAEhB,IAAMC,EAAiB,CACnBC,MAAOF,EAAME,OAAS,QACtBC,SAAUH,EAAMG,UAAY,mBAC5BC,gBAAiBJ,EAAMK,SAAW,sBAGtC,OACIC,EAAAC,EAAAC,cAAA,KAAGC,KAAMT,EAAMS,KAAMC,MAAOT,EAAgBU,UAAU,eAAeX,EAAMY,YCJpEC,EANF,WACT,OACIP,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAER,MAAO,iBAAkBI,EAAAC,EAAAC,cAAA,iBAA7C,MC0DOM,EAzDA,SAACd,GACZ,OACIM,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,oBACJV,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,eACJV,EAAAC,EAAAC,cAACS,EAAD,OAEJX,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,gBACJV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,aAAR,aACJH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,aAAR,aACJH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,WAAR,WACJH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACU,EAAD,CAAYT,KAAK,UAAjB,eAOxBH,EAAAC,EAAAC,cAAA,YACKR,EAAMY,UAGXN,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,oBACJV,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,SACJV,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,mEAAiEF,EAAAC,EAAAC,cAAA,WACjEF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAER,MAAO,QAAtB,UAAjB,wBAEJI,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,0BACJV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACU,EAAD,CACIT,KAAK,2DACLJ,QAAQ,kBACRF,SAAS,QAHb,WAMJG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACU,EAAD,CACIT,KAAK,kCACLJ,QAAQ,aACRF,SAAS,QAHb,gBC7CPgB,0LAEb,OACIb,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,uBACJV,EAAAC,EAAAC,cAAA,4CAJkBY,IAAMC,YCiBzBC,mLAZX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,cAN3BE,aCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.728947c9.chunk.js","sourcesContent":["import React from 'react';\nimport './LinkButton.css';\n\nconst LinkButton = (props) => {\n    \n    const variableStyles = {\n        color: props.color || 'white',\n        fontSize: props.fontSize || 'var(--font-size)',\n        backgroundColor: props.bgColor || 'var(--light-green)'\n    }\n    \n    return (\n        <a href={props.href} style={variableStyles} className=\"link-button\">{props.children}</a>\n    );\n}\n\nexport default LinkButton;","import React from 'react';\n\nconst Logo = () => {\n    return (\n        <h2>A<span style={{ color: 'var(--theme)' }}><sub>2</sub></span>Z</h2>\n    );\n}\n\nexport default Logo;","import React from 'react';\nimport './Layout.css';\nimport LinkButton from '../../components/LinkButton/LinkButton';\nimport Logo from '../../components/Logo/Logo';\n\nconst Layout = (props) => {\n    return (\n        <React.Fragment>\n            <header>\n                <div id=\"header-container\">\n                    <div id=\"header-left\">\n                        <Logo />\n                    </div>\n                    <div id=\"header-right\">\n                        <nav>\n                            <ul>\n                                <li><a href=\"/explorer\">Explorer</a></li>\n                                <li><a href=\"/roadmaps\">Roadmaps</a></li>\n                                <li><a href=\"/signup\">SignUp</a></li>\n                                <li><LinkButton href=\"/login\">Login</LinkButton></li>\n                            </ul>\n                        </nav>\n                    </div>\n                </div>\n            </header>\n\n            <main>\n                {props.children}\n            </main>\n            \n            <footer>\n                <div id=\"footer-container\">\n                    <div id=\"claim\">\n                        <Logo />\n                        <small>This project was initiated by Deepak Kumar in 2018</small><br/>\n                        <small>Made with <span style={{ color: \"red\" }}>â™¥</span> by the Open Source</small>\n                    </div>\n                    <div id=\"footer-links-container\">\n                        <div className=\"footer-link\">\n                            <p>Want to Contribute?</p>\n                            <LinkButton\n                                href=\"https://github.com/dipakkr/A-to-Z-Resources-for-Students\"\n                                bgColor=\"var(--bg-black)\"\n                                fontSize=\"12px\"\n                            >GitHub</LinkButton>\n                        </div>\n                        <div className=\"footer-link\">\n                            <p>Join our Gitter Lobby</p>\n                            <LinkButton\n                                href=\"https://gitter.im/a2z-resources\"\n                                bgColor=\"var(--red)\"\n                                fontSize=\"12px\"\n                            >Gitter</LinkButton>\n                        </div>\n                    </div>\n                    \n                </div>\n            </footer>\n        </React.Fragment>\n    )\n}\n\nexport default Layout;","import React from 'react';\nimport './Home.css';\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <div id=\"home-page-container\">\n                <h2>Add the home page here</h2>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Layout from '../../hoc/Layout/Layout';\nimport Home from '../Home/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>  \n        <div className=\"App\">\n          <Layout>\n            <Route path=\"/\" exact component={Home} />\n          </Layout>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}